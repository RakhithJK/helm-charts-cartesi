## dapp deployment paramaters
##
dapp:
  ## dapp.image is a complete image name, e.g. "cartesi/dapp:echo-python-0.8.0-server"
  ## REQUIRED
  image:
  ## dapp.contractAddress is the contract address of the dapp deployed on the blockchain
  ## REQUIRED
  contractAddress:
  ## dapp.mnemonic is the mnemonic for the wallet
  ## REQUIRED
  mnemonic:
  ## dapp.httpProvider is the URL for the http:// endpoint of the provider
  ## REQUIRED
  httpProvider:
  ## dapp.wsProvider is the URL for the ws:// endpoint of the provider
  ## REQUIRED
  wsProvider:
  ## dapp.network is the name of the network the dapp is deployed on
  ## REQUIRED
  ##
  ## Available options are:
  ##   - mainnet
  ##   - goerli
  ##   - bsc-testnet
  ##   - avalanche-fuji
  ##   - polygon-mumbai
  ##   - optimism-goerli
  ##   - arbitrum-goerli
  network:
  ## dapp.postgres is the postgres configuration
  ## REQUIRED, unless postgresOperator.enabled == true
  postgres:
    ## dapp.postgres.hostname is the hostname of the postgres server
    hostname:
    ## dapp.postgres.hostname is the port of the postgres server (default: 5432)
    port:
    ## dapp.postgres.user is the username of the postgres server (default: postgres)
    user:
    ## dapp.postgres.password is the password of the postgres server (default: "")
    password:
    ## dapp.postgres.dbname is the name of the postgres database (default: postgres)
    dbname:

## cartesi holds the configuration for the default containers images
##
global:
  image:
    registry: docker.io
    tag: 0.8.1

## seviceAccount configuration to be used by the rollups-validator-node
##
serviceAccount:
  ## serviceAccount.create defines whether a service account should be created
  create: false
  ## serviceAccount.annottions defines the annotations to add to the service account
  annotations: {}
  ## serviceAccount.name defines the name of the service account to use.
  ## If not set and create is true, a name is generated using the fullname template
  name: ""

fullnameOverride: ""
nameOverride: ""

## image configuration to be used by the rollups-validator-node
##
image:
  pullPolicy: Always
  pullSecrets: []

## ingress defines whether an Ingress will be created for the dapp
## The default Ingress has a default path / that points to the endpoints.queryServer
## And an /inspect path that points to the endpoints.inspectServer
## The dapp.contractAddress is used a a hostname suffixed by the ingress.subDomain
## e.g.
## host: 0xabcde.local
##
ingress:
  enabled: false
  subDomain: "local"
  ## ingress.addReleaseNameCNAME adds the helm release name to the ingress as an additional rules[].host: {}
  ## You should be careful to use a release name that's safe to use as a hostname
  ## e.g. "my-release-name"
  ## You shouldn't use "_" as a character in a hostname
  addReleaseNameAsHost: false
  ## ingress.annotation defines the annotations for both ingresses
  annotations: {}

## postgresOperator configuration
## You should already have postgres-operator installed on your cluster.
## See: https://github.com/movetokube/postgres-operator/
##
postgresOperator:
  ## postgresOperator.enabled defines whether the postgres operator should
  ## used by the indexer and query-server
  enabled: false
  database:
    ## postgresOperator.database.name defines the name of the database to
    ## be created (default: dapp.contractAddress)
    name:
    ## postgresOperatos.dataase.dropOnDelete defines if the database should
    ## be droped when the resources are delete
    dropOnDelete: false

## redis configuration
redis:
  ## redis.endpoint: e.g.: redis://localhost:6379
  ## REQUIRED
  endpoint:

## rollups-validator-node Pod configuration
##
validator:
  nodeSelector: {}

  tolerations: []

  affinity: {}

  ## validator.initContainers add additional init containers to the validator-node pod(s)
  ## Example
  ##
  ## initContainers:
  ##   - name: do-something
  ##     image: busybox
  ##     command: ['do', 'something']
  ##
  initContainers: []

  podSecurityContext:
    {}
    ## fsGroup: 2000

  podAnnotations: {}

  dispatcher:
    image:
      registry:
      repository: cartesi/rollups-dispatcher
      tag:
      digest:

    ## The RUST_LOG level can be set to trace, debug, info, warn, error, or off.
    logLevel: info
    ## --claims-consume-timeout <claims-consume-timeout>
    ##     Consume timeout when waiting for the rollups claims in ms [env: CLAIMS_CONSUME_TIMEOUT=]  [default: 300000]
    claimsConsumeTimeout: 300000
    ## --hc-host-address <hc-host-address>
    ##     Host address of health check [env: HC_HOST_ADDRESS=]
    healthCheckAddress: "0.0.0.0"
    ## --hc-port <hc-port>
    ##     Port of health check [env: HC_PORT=]
    healthCheckPort: "8080"

    rollupsDapp:
      initialEpoch: 0
      minimumRequiredFee:
      numBufferEpochs:
      numClaimsTriggerRedeem:

    transactionManager:
      chainID:
      databasePath: /opt/cartesi/rollups-dispatcher/lib/tx-manager.db
      defaultConfirmations: 2
      gasOracleAPIKey:
      mnemonic:
      mnemonicAccountIndex:
      providerHTTPEndpoint:
      chainIsLegacy: "false"

    stateClient:
      defaultConfirmations: 1
      grpcEndpoint: http://localhost:50051

    args: []
    extraArgs: []

    ## extraEnvVars Array with extra environment variables to add to validator.dispatcher container
    ## e.g:
    ## extraEnvVars:
    ##   - name: FOO
    ##     value: "bar"
    ##
    extraEnvVars: []

    configFile:

    securityContext:
      {}
      ## capabilities:
      ##   drop:
      ##   - ALL
      ## readOnlyRootFilesystem: true
      ## runAsNonRoot: true
      ## runAsUser: 1000

    resources:
      {}
      ## limits:
      ##   cpu: 100m
      ##   memory: 128Mi
      ## requests:
      ##   cpu: 100m
      ##   memory: 128Mi

  stateServer:
    image:
      registry:
      repository: cartesi/rollups-state-server
      tag:
      digest:

    ## The RUST_LOG level can be set to trace, debug, info, warn, error, or off.
    logLevel: info

    ## TODO: add documentation for each parameter
    blockHistory:
      blockTimeout: "120"
      httpEndpoint:
      maxDepth:
      wsEndpoint:

    stateFold:
      concurrentEventsFetch:
      genesisBlock: "0x1"
      queryLimitErrorCodes:
      safetyMargin: "1"

    stateServer:
      serverAddress:

    args: []
    extraArgs: []

    ## extraEnvVars Array with extra environment variables to add to validator.stateServer container
    ## e.g:
    ## extraEnvVars:
    ##   - name: FOO
    ##     value: "bar"
    ##
    extraEnvVars: []

    securityContext:
      {}
      ## capabilities:
      ##   drop:
      ##   - ALL
      ## readOnlyRootFilesystem: true
      ## runAsNonRoot: true
      ## runAsUser: 1000

    resources:
      {}
      ## limits:
      ##   cpu: 100m
      ##   memory: 128Mi
      ## requests:
      ##   cpu: 100m
      ##   memory: 128Mi

  indexer:
    postgresEndpoint: postgresql://postgres:postgres@database:5432/postgres

    image:
      registry:
      repository: cartesi/rollups-indexer
      tag:
      digest:

    ## The RUST_LOG level can be set to trace, debug, info, warn, error, or off.
    logLevel: info
    ## --http-health-hostname <http-health-hostname>                 [env: HTTP_HEALTH_HOSTNAME=]
    healthCheckAddress: "0.0.0.0"
    ## --http-health-port <http-health-port>                         [env: HTTP_HEALTH_PORT=]
    healthCheckPort: "8081"

    machineManager:
      endpoint:
      sessionID: "default_rollups_id"

    stateServer:
      endpoint: http://localhost:50051

    config:
      confirmations: 1
      initialEpoch: 0
      interval: 10

    args: []

    ## extraEnvVars Array with extra environment variables to add to validator.indexer container
    ## e.g:
    ## extraEnvVars:
    ##   - name: FOO
    ##     value: "bar"
    ##
    extraEnvVars: []

    securityContext:
      {}
      ## capabilities:
      ##   drop:
      ##   - ALL
      ## readOnlyRootFilesystem: true
      ## runAsNonRoot: true
      ## runAsUser: 1000

    resources:
      {}
      ## limits:
      ##   cpu: 100m
      ##   memory: 128Mi
      ## requests:
      ##   cpu: 100m
      ##   memory: 128Mi

## rollups-validator-node-server-manager Pod configuration
##
serverManager:
  nodeSelector: {}

  tolerations: []

  affinity: {}

  ## validator.initContainers add additional init containers to the validator-node pod(s)
  ## Example
  ##
  ## initContainers:
  ##   - name: do-something
  ##     image: busybox
  ##     command: ['do', 'something']
  ##
  initContainers: []

  podSecurityContext:
    {}
    ## fsGroup: 2000

  podAnnotations: {}

  ## serverManager.logLevel set SERVER_MANAGER_LOG_LEVEL env, can be set to trace, debug, info, warning, error, and fatal.
  logLevel: info

  remoteCartesiMachine:
    ## serverManager.remoteCartesiMachine.logLevel set REMOTE_CARTESI_MACHINE_LOG_LEVEL env, can be set to trace, debug, info, warning, error, and fatal.
    ## defaults to serverManager.logLevel unless you provide a different value
    logLevel:

  brokerProxy:
    image:
      registry:
      repository: cartesi/rollups-server-manager-broker-proxy
      tag:
      digest:

    ## serverManager.brokerProxy.logLevel sets RUST_LOG env, can be trace, debug, info, warn, error, or off.
    logLevel: info

    ## --server-manager-endpoint <SERVER_MANAGER_ENDPOINT>
    ##    Server-manager gRPC endpoint [env: SERVER_MANAGER_ENDPOINT=] [default: http://127.0.0.1:5001]
    serverManagerEndpoint:
    ## --session-id <SESSION_ID>
    ##     Server-manager session id [env: SESSION_ID=] [default: default_rollups_id]
    sessionID:
    ## --sm-pending-inputs-sleep-duration <SM_PENDING_INPUTS_SLEEP_DURATION>
    ##     Sleep duration while polling for server-manager pending inputs (in millis) [env: SM_PENDING_INPUTS_SLEEP_DURATION=] [default:
    pendingInputsSleepDuration:
    ## --sm-pending-inputs-max-retries <SM_PENDING_INPUTS_MAX_RETRIES>
    ##     Max number of retries while polling server-manager for pending inputs [env: SM_PENDING_INPUTS_MAX_RETRIES=] [default: 60]
    pendingInputsMaxRetries:
    ## --sm-concurrency-update-merkle-tree <SM_CONCURRENCY_UPDATE_MERKLE_TREE>
    ##     Defines the number of threads to use while calculating the merkle tree [env: SM_CONCURRENCY_UPDATE_MERKLE_TREE=] [default: 0]
    concurrencyUpdateMerkleTree:
    ## --sm-deadline-checkin <SM_DEADLINE_CHECKIN>
    ##     Deadline for receiving checkin from spawned machine server [env: SM_DEADLINE_CHECKIN=] [default: 5000]
    deadlineCheckin:
    ## --sm-deadline-advance-state <SM_DEADLINE_ADVANCE_STATE>
    ##     Deadline for advancing the state [env: SM_DEADLINE_ADVANCE_STATE=] [default: 180000]
    deadlineAdvanceState:
    ## --sm-deadline-advance-state-increment <SM_DEADLINE_ADVANCE_STATE_INCREMENT>
    ##     Deadline for each increment when advancing state [env: SM_DEADLINE_ADVANCE_STATE_INCREMENT=] [default: 10000]
    deadlineAdvanceStateIncrement:
    ## --sm-deadline-inspect-state <SM_DEADLINE_INSPECT_STATE>
    ##     Deadline for inspecting state [env: SM_DEADLINE_INSPECT_STATE=] [default: 180000]
    deadlineInspectState:
    ## --sm-deadline-inspect-state-increment <SM_DEADLINE_INSPECT_STATE_INCREMENT>
    ##     Deadline for each increment when inspecting state [env: SM_DEADLINE_INSPECT_STATE_INCREMENT=] [default: 10000]
    deadlineInspectStateIncrement:
    ## --sm-deadline-machine <SM_DEADLINE_MACHINE>
    ##     Deadline for instantiating a machine [env: SM_DEADLINE_MACHINE=] [default: 300000]
    deadlineMachine:
    ## --sm-deadline-store <SM_DEADLINE_STORE>
    ##     Deadline for storing a machine [env: SM_DEADLINE_STORE=] [default: 180000]
    deadlineStore:
    ## --sm-deadline-fast <SM_DEADLINE_FAST>
    ##     Deadline for quick machine server tasks [env: SM_DEADLINE_FAST=] [default: 5000]
    deadlineFast:
    ## --sm-cycles-max-advance-state <SM_CYCLES_MAX_ADVANCE_STATE>
    ##     Maximum number of cycles that processing the input in an AdvanceState can take [env: SM_CYCLES_MAX_ADVANCE_STATE=] [default: 4611686018427387903]
    cyclesMaxAdvanceState:
    ## --sm-cycles-advance-state-increment <SM_CYCLES_ADVANCE_STATE_INCREMENT>
    ##     Number of cycles in each increment to processing an input [env: SM_CYCLES_ADVANCE_STATE_INCREMENT=] [default: 4194304]
    cyclesAdvanceStateIncrement:
    ## --sm-cycles-max-inspect-state <SM_CYCLES_MAX_INSPECT_STATE>
    ##     Maximum number of cycles that processing the query in an InspectState can take [env: SM_CYCLES_MAX_INSPECT_STATE=] [default: 4611686018427387903]
    cyclesMaxInspectState:
    ## --sm-cycles-inspect-state-increment <SM_CYCLES_INSPECT_STATE_INCREMENT>
    ##     Number of cycles in each increment to processing a query [env: SM_CYCLES_INSPECT_STATE_INCREMENT=] [default: 4194304]
    cyclesInspectStateIncrement:
    ## --dapp-contract-address <DAPP_CONTRACT_ADDRESS>
    ##     Address of rollups dapp [env: DAPP_CONTRACT_ADDRESS=]
    dappContractAddress:
    ## --dapp-contract-address-file <DAPP_CONTRACT_ADDRESS_FILE>
    ##     Path to file with address of rollups dapp [env: DAPP_CONTRACT_ADDRESS_FILE=]
    dappContractAddressFile:
    ## --consume-timeout <CONSUME_TIMEOUT>
    ##     Timeout when consuming input events (in millis) [env: CONSUME_TIMEOUT=] [default: 5000]
    consumeTimeout:
    ## --health-check-address <HEALTH_CHECK_ADDRESS>
    ##     Host address of health check [env: HEALTH_CHECK_ADDRESS=] [default: 0.0.0.0]
    healthCheckAddress:
    ## --health-check-port <HEALTH_CHECK_PORT>
    ##     Port of health check [env: HEALTH_CHECK_PORT=] [default: 8080]
    healthCheckPort: 8080
    ## --backoff-max-elapsed-duration <BACKOFF_MAX_ELAPSED_DURATION>
    ##     The max elapsed time for backoff in ms [env: BACKOFF_MAX_ELAPSED_DURATION=] [default: 120000]
    backoffMaxElapsedDuration:

    args: []
    extraArgs: []

    ## extraEnvVars Array with extra environment variables to add to serverManager.brokerProxy container
    ## e.g:
    ## extraEnvVars:
    ##   - name: FOO
    ##     value: "bar"
    ##
    extraEnvVars: []

    securityContext:
      {}
      ## capabilities:
      ##   drop:
      ##   - ALL
      ## readOnlyRootFilesystem: true
      ## runAsNonRoot: true
      ## runAsUser: 1000

    resources:
      {}
      ## limits:
      ##   cpu: 100m
      ##   memory: 128Mi
      ## requests:
      ##   cpu: 100m
      ##   memory: 128Mi

  args: []
  extraArgs: []

  ## extraEnvVars Array with extra environment variables to add to serverManager container
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []

  service:
    type: ClusterIP
    port: 5001

  securityContext:
    {}
    ## capabilities:
    ##   drop:
    ##   - ALL
    ## readOnlyRootFilesystem: true
    ## runAsNonRoot: true
    ## runAsUser: 1000

  resources:
    {}
    ## limits:
    ##   cpu: 100m
    ##   memory: 128Mi
    ## requests:
    ##   cpu: 100m
    ##   memory: 128Mi

## rollups-validator-node-endpoints Pod configuration
##
endpoints:
  replicaCount: 1

  nodeSelector: {}

  tolerations: []

  affinity: {}

  ## endpoints.initContainers Add additional init containers to the endpoints pod(s)
  ## Example
  ##
  ## initContainers:
  ##   - name: do-something
  ##     image: busybox
  ##     command: ['do', 'something']
  ##
  initContainers: []

  podSecurityContext:
    {}
    ## fsGroup: 2000

  podAnnotations: {}

  inspectServer:
    image:
      registry:
      repository: cartesi/rollups-inspect-server
      tag:
      digest:

    ## The RUST_LOG level can be set to trace, debug, info, warn, error, or off.
    logLevel: info

    ## TODO: add documentation for each parameter
    config:
      address: 0.0.0.0:5005

    machineManager:
      endpoint:
      sessionID: "default_rollups_id"

    args: []
    extraArgs: []

    ## extraEnvVars Array with extra environment variables to add to endpoints.inspectServer container
    ## e.g:
    ## extraEnvVars:
    ##   - name: FOO
    ##     value: "bar"
    ##
    extraEnvVars: []

    securityContext:
      {}
      ## capabilities:
      ##   drop:
      ##   - ALL
      ## readOnlyRootFilesystem: true
      ## runAsNonRoot: true
      ## runAsUser: 1000

    ingress:
      ## endpoints.inspectServer.ingress.annotations defines extra anotations
      ## specifically for the endpoints.inspectServer.service
      annotations: {}

    service:
      type: ClusterIP
      port: 5005

    resources:
      {}
      ## limits:
      ##   cpu: 100m
      ##   memory: 128Mi
      ## requests:
      ##   cpu: 100m
      ##   memory: 128Mi

  queryServer:
    image:
      registry:
      repository: cartesi/query-server
      tag:
      digest:

    ## The RUST_LOG level can be set to trace, debug, info, warn, error, or off.
    logLevel: info

    ## extraEnvVars Array with extra environment variables to add to endpoints.queryServer container
    ## e.g:
    ## extraEnvVars:
    ##   - name: FOO
    ##     value: "bar"
    ##
    extraEnvVars: []

    securityContext:
      {}
      ## capabilities:
      ##   drop:
      ##   - ALL
      ## readOnlyRootFilesystem: true
      ## runAsNonRoot: true
      ## runAsUser: 1000

    ingress:
      ## endpoints.queryServer.ingress.annotations defines extra anotations
      ## specifically for the endpoints.queryServer.service
      annotations: {}

    service:
      type: ClusterIP
      port: 4000

    resources:
      {}
      ## limits:
      ##   cpu: 100m
      ##   memory: 128Mi
      ## requests:
      ##   cpu: 100m
      ##   memory: 128Mi
